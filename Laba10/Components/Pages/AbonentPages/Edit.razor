@page "/abonents/edit"
@using Microsoft.EntityFrameworkCore
@using Laba10.Data
@inject IDbContextFactory<Laba10.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактирование</PageTitle>

<h1>Редактирование</h1>

<hr />
@if (Abonent is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Abonent" OnValidSubmit="UpdateAbonent" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Abonent.AbonentId" value="@Abonent.AbonentId" />
                <div class="mb-3">
                    <label for="familiya" class="form-label">Фамилия:</label>
                    <InputText id="familiya" @bind-Value="Abonent.Familiya" class="form-control" />
                    <ValidationMessage For="() => Abonent.Familiya" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="imya" class="form-label">Имя:</label>
                    <InputText id="imya" @bind-Value="Abonent.Imya" class="form-control" />
                    <ValidationMessage For="() => Abonent.Imya" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="otchestvo" class="form-label">Отчество:</label>
                    <InputText id="otchestvo" @bind-Value="Abonent.Otchestvo" class="form-control" />
                    <ValidationMessage For="() => Abonent.Otchestvo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="adres" class="form-label">Адрес:</label>
                    <InputText id="adres" @bind-Value="Abonent.Adres" class="form-control" />
                    <ValidationMessage For="() => Abonent.Adres" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="telefon" class="form-label">Телефон:</label>
                    <InputText id="telefon" @bind-Value="Abonent.Telefon" class="form-control" />
                    <ValidationMessage For="() => Abonent.Telefon" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/abonents">Возврат к списку абонентов</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int AbonentId { get; set; }

    [SupplyParameterFromForm]
    private Abonent? Abonent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Abonent ??= await context.Abonents.FirstOrDefaultAsync(m => m.AbonentId == AbonentId);

        if (Abonent is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAbonent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Abonent!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AbonentExists(Abonent!.AbonentId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/abonents");
    }

    private bool AbonentExists(int abonentid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Abonents.Any(e => e.AbonentId == abonentid);
    }
}
