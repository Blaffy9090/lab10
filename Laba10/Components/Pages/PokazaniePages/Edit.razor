@page "/pokazanies/edit"
@using Microsoft.EntityFrameworkCore
@using Laba10.Data
@inject IDbContextFactory<Laba10.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<hr />
@if (Pokazanie is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Pokazanie" OnValidSubmit="UpdatePokazanie" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Pokazanie.PokazanieId" value="@Pokazanie.PokazanieId" />
                <div class="mb-3">
                    <label for="datapokazaniya" class="form-label">Дата показания:</label>
                    <InputDate id="datapokazaniya" @bind-Value="Pokazanie.DataPokazaniya" class="form-control" />
                    <ValidationMessage For="() => Pokazanie.DataPokazaniya" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="znacheniepokazaniya" class="form-label">Значение показания:</label>
                    <InputNumber id="znacheniepokazaniya" @bind-Value="Pokazanie.ZnacheniePokazaniya" class="form-control" />
                    <ValidationMessage For="() => Pokazanie.ZnacheniePokazaniya" class="text-danger" />
                </div>
                <div class="mb-3">
                    <input type="hidden" name="Pokazanie.SchetchikId" @bind="Pokazanie.SchetchikId" class="form-control">
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/pokazanies?schetchikid=@Pokazanie?.SchetchikId&abonentid=@AbonentId">Возврат к списку показаний</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int? AbonentId { get; set; }

    [SupplyParameterFromQuery]
    private int PokazanieId { get; set; }

    [SupplyParameterFromForm]
    private Pokazanie? Pokazanie { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Pokazanie ??= await context.Pokazanies.FirstOrDefaultAsync(m => m.PokazanieId == PokazanieId);

        if (Pokazanie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdatePokazanie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Pokazanie!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PokazanieExists(Pokazanie!.PokazanieId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo($"/pokazanies?schetchikid={Pokazanie!.SchetchikId}&abonentid={AbonentId}");
    }

    private bool PokazanieExists(int pokazanieid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Pokazanies.Any(e => e.PokazanieId == pokazanieid);
    }
}
